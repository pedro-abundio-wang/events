apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "events-postgres.fullname" . }}
  labels:
    {{- include "events-postgres.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "events-postgres.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "events-postgres.fullname" . }}
  template:
    metadata:
      labels:
        {{- include "events-postgres.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: tcp
              containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "postgres"
            - name: USE_DB_ID
              value: "false"
            - name: USE_JSON_PAYLOAD_AND_HEADERS
              value: "false"
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
          livenessProbe:
            exec:
              command: [ "psql", "-Upostgres", "-dpostgres", "-c", "SELECT 1" ]
            initialDelaySeconds: 60
            periodSeconds: 20
          readinessProbe:
            exec:
              # Check we can execute queries over TCP (skip-networking is off).
              command: [ "psql", "-Upostgres", "-dpostgres", "-c", "SELECT 1" ]
            initialDelaySeconds: 60
            periodSeconds: 20
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 8Gi