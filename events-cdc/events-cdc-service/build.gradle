plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
}

dependencies {

    implementation project(':events-cdc:events-cdc-pipeline')

    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'io.micrometer:micrometer-registry-prometheus'

    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    implementation "org.redisson:redisson:${redissonVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation "org.apache.curator:curator-recipes:${curatorVersion}"
    implementation 'org.springframework.kafka:spring-kafka'

    testImplementation 'junit:junit'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

bootBuildImage {
    imageName = "${harborHost}:${harborPort}/${harborProject}/${project.name}:${project.version}"
    publish = true
    docker {
        host = "tcp://${dockerHost}:${dockerPort}"
        publishRegistry {
            url = "http://${harborHost}:${harborPort}"
            username = "${harborUser}"
            password = "${harborPass}"
        }
    }
    environment = [
            "BP_JVM_VERSION"             : "8.*",
            "BPE_DELIM_JAVA_TOOL_OPTIONS": ""
    ]
}

dockerCompose {
    environment.put 'USE_DB_ID', 'false'
    environment.put 'USE_JSON_PAYLOAD_AND_HEADERS', 'false'
    environment.put 'SPRING_PROFILES_ACTIVE', 'kafka, zookeeper'
    useComposeFiles = ["deployment/docker-compose/docker-compose.yml"]
}