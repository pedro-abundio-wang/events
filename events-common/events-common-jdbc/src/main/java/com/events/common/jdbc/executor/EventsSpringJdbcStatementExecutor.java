package com.events.common.jdbc.executor;

import com.events.common.jdbc.exception.EventsDuplicateKeyException;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import java.sql.PreparedStatement;
import java.sql.Statement;
import java.util.List;
import java.util.Map;

public class EventsSpringJdbcStatementExecutor implements EventsJdbcStatementExecutor {

  private final JdbcTemplate jdbcTemplate;

  public EventsSpringJdbcStatementExecutor(JdbcTemplate jdbcTemplate) {
    this.jdbcTemplate = jdbcTemplate;
  }

  @Override
  public long insertAndReturnAutoGeneratedId(String sql, String idColumn, Object... params) {
    try {
      KeyHolder holder = new GeneratedKeyHolder();
      jdbcTemplate.update(
          connection -> {
            PreparedStatement preparedStatement =
                connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

            for (int i = 1; i <= params.length; i++) {
              preparedStatement.setObject(i, params[i - 1]);
            }

            return preparedStatement;
          },
          holder);

      if (holder.getKeys().size() > 1) {
        // necessary for postgresql. For postgres holder returns all columns.
        return (Long) holder.getKeys().get(idColumn);
      } else {
        return holder.getKey().longValue();
      }
    } catch (DuplicateKeyException e) {
      throw new EventsDuplicateKeyException(e);
    }
  }

  @Override
  public int update(String sql, Object... params) {
    try {
      return jdbcTemplate.update(sql, params);
    } catch (DuplicateKeyException e) {
      throw new EventsDuplicateKeyException(e);
    }
  }

  @Override
  public <T> List<T> query(String sql, EventsRowMapper<T> eventsRowMapper, Object... params) {
    return jdbcTemplate.query(sql, eventsRowMapper::mapRow, params);
  }

  @Override
  public List<Map<String, Object>> queryForList(String sql, Object... parameters) {
    return jdbcTemplate.queryForList(sql, parameters);
  }
}
