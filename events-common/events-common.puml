@startuml
class com.events.common.jdbc.sql.dialect.DefaultEventsSqlDialect {
+ boolean supports(String)
+ boolean accepts(String)
}
class com.events.common.id.DatabaseIdGenerator {
+ {static} long OUTBOX_ID_MAX_VALUE
+ {static} long COUNTER_MAX_VALUE
- long outboxId
+ boolean databaseIdRequired()
+ Int128 genId(Long)
+ Optional<Int128> incrementIdIfPossible(Int128)
}
class com.events.common.jdbc.executor.EventsJdkJdbcStatementExecutor {
- {static} Set<Integer> DUPLICATE_KEY_ERROR_CODES
- Supplier<Connection> connectionProvider
+ long insertAndReturnAutoGeneratedId(String,String,Object)
+ int update(String,Object)
+ List<T> query(String,EventsRowMapper<T>,Object)
+ List<Map<String,Object>> queryForList(String,Object)
- void handleSqlUpdateException(SQLException)
}
class com.events.common.jdbc.transaction.EventsSpringTransactionTemplate {
- TransactionTemplate transactionTemplate
+ T executeInTransaction(Supplier<T>)
}
interface com.events.common.jdbc.sql.dialect.EventsSqlDialect {
~ boolean supports(String)
~ boolean accepts(String)
~ String getCurrentTimeInMillisecondsExpression()
}
class com.events.common.util.Events {
- {static} int defaultIntervalInMillis
~ {static} int defaultIterations
+ {static} void eventually(Runnable)
+ {static} void eventually(String,Runnable)
+ {static} void eventually(int,int,TimeUnit,Runnable)
+ {static} void eventually(String,int,int,TimeUnit,Runnable)
+ {static} T eventuallyReturning(String,Supplier<T>)
+ {static} T eventuallyReturning(Supplier<T>)
+ {static} T eventuallyReturning(int,int,TimeUnit,Supplier<T>)
+ {static} T eventuallyReturning(String,int,int,TimeUnit,Supplier<T>)
}
class com.events.common.jdbc.spring.config.EventsTransactionTemplateConfiguration {
+ EventsTransactionTemplate eventsTransactionTemplate(TransactionTemplate)
}
class com.events.common.util.UrlTesting {
+ {static} void assertUrlStatusIsOk(String,int,String)
}
class com.events.common.jdbc.operation.EventsJdbcOperations {
- EventsJdbcOperationsUtils eventsJdbcOperationsUtils
- EventsJdbcStatementExecutor eventsJdbcStatementExecutor
- EventsSchema eventsSchema
+ String insertIntoEventsTable(IdGenerator,String,String,String,String,Optional<String>,Optional<String>)
- String insertIntoEventsTable(IdGenerator,String,String,String,String,Optional<String>,Optional<String>,boolean)
- String insertIntoEventsTableApplicationId(IdGenerator,String,String,String,String,Optional<String>,Optional<String>,boolean)
- String insertIntoEventsTableDatabaseId(IdGenerator,String,String,String,String,Optional<String>,Optional<String>,boolean)
+ String insertIntoMessageTable(IdGenerator,String,String,Map<String,String>)
- String insertIntoMessageTable(IdGenerator,String,String,Map<String,String>,boolean)
- String insertIntoMessageTableDatabaseId(IdGenerator,String,String,Map<String,String>,boolean)
- String insertIntoMessageTableApplicationId(IdGenerator,String,String,Map<String,String>,boolean)
}
class com.events.common.jdbc.spring.config.EventsSchemaConfiguration {
+ EventsSchema eventsSchema(String)
}
interface com.events.common.id.IdGenerator {
~ boolean databaseIdRequired()
~ Int128 genId(Long)
~ Optional<Int128> incrementIdIfPossible(Int128)
}
class com.events.common.util.HttpDateHeaderFormatUtil {
+ {static} String nowAsHttpDateString()
+ {static} String timeAsHttpDateString(ZonedDateTime)
}
abstract class com.events.common.jdbc.sql.dialect.AbstractEventsSqlDialect {
- Set<String> drivers
- Set<String> names
- String currentTimeInMillisecondsExpression
+ String getCurrentTimeInMillisecondsExpression()
+ boolean supports(String)
+ boolean accepts(String)
+ int getOrder()
}
interface com.events.common.jdbc.sql.dialect.EventsSqlDialectOrder {
~ int getOrder()
}
class com.events.common.jdbc.schema.SchemaAndTable {
- String schema
- String tableName
+ String getSchema()
+ String getTableName()
+ String toString()
+ int hashCode()
+ boolean equals(Object)
}
class com.events.common.jdbc.exception.EventsDuplicateKeyException {
}
class com.events.common.jdbc.schema.JdbcUrlParser {
- {static} String JDBC_PATTERN
+ {static} JdbcUrl parse(String)
}
class com.events.common.jdbc.schema.JdbcUrl {
- String host
- int port
- String database
+ String getHost()
+ int getPort()
+ String getDatabase()
+ String toString()
}
class com.events.common.id.Int128 {
- long high
- long low
+ String asString()
+ String toString()
+ boolean equals(Object)
+ int hashCode()
+ {static} Int128 fromString(String)
+ int compareTo(Int128)
+ long getHigh()
+ long getLow()
}
class com.events.common.id.spring.config.IdGeneratorConfiguration {
+ IdGenerator applicationIdGenerator()
+ IdGenerator databaseIdGenerator(long)
}
interface com.events.common.jdbc.executor.EventsRowMapper {
~ T mapRow(ResultSet,int)
}
class com.events.common.jdbc.schema.EventsSchema {
+ {static} String DEFAULT_SCHEMA
- String eventsDatabaseSchema
+ String getEventsDatabaseSchema()
+ boolean isDefault()
+ String qualifyTable(String)
}
class com.events.common.jdbc.spring.config.EventsJdbcOperationsConfiguration {
+ EventsJdbcStatementExecutor eventsJdbcStatementExecutor(JdbcTemplate)
+ EventsJdbcOperations eventsJdbcOperations(EventsJdbcStatementExecutor,EventsSqlDialectSelector,String,EventsSchema)
}
class com.events.common.jdbc.executor.EventsSpringJdbcStatementExecutor {
- JdbcTemplate jdbcTemplate
+ long insertAndReturnAutoGeneratedId(String,String,Object)
+ int update(String,Object)
+ List<T> query(String,EventsRowMapper<T>,Object)
+ List<Map<String,Object>> queryForList(String,Object)
}
class com.events.common.id.ApplicationIdGenerator {
- Logger logger
- {static} long MAX_COUNTER
- Long macAddress
- long currentTimeMillis
- long counter
+ boolean databaseIdRequired()
- Long getMacAddress()
- Long toLong(byte[])
- long timeNow()
- Int128 makeId()
+ Int128 genIdInternal()
+ Int128 genId(Long)
+ Optional<Int128> incrementIdIfPossible(Int128)
}
class com.events.common.jdbc.sql.dialect.EventsSqlDialectSelector {
- Collection<EventsSqlDialect> eventsSqlDialects
+ EventsSqlDialect getDialect(String)
- EventsSqlDialect getDialect(Predicate<EventsSqlDialect>,String)
}
class com.events.common.jdbc.operation.EventsJdbcOperationsUtils {
+ {static} String MESSAGE_AUTO_GENERATED_ID_COLUMN
+ {static} String EVENT_AUTO_GENERATED_ID_COLUMN
- EventsSqlDialect eventsSqlDialect
+ String insertIntoEventsTableApplicationIdSql(EventsSchema)
+ String insertIntoEventsTableDatabaseIdSql(EventsSchema)
+ String insertIntoMessageTableApplicationIdSql(EventsSchema)
+ String insertIntoMessageTableDatabaseIdSql(EventsSchema)
+ int booleanToInt(boolean)
}
interface com.events.common.jdbc.executor.EventsJdbcStatementExecutor {
~ long insertAndReturnAutoGeneratedId(String,String,Object)
~ int update(String,Object)
~ List<T> query(String,EventsRowMapper<T>,Object)
~ List<Map<String,Object>> queryForList(String,Object)
}
class com.events.common.jdbc.exception.EventsSqlException {
}
class com.events.common.id.spring.config.ApplicationIdGeneratorCondition {
+ ConditionOutcome getMatchOutcome(ConditionContext,AnnotatedTypeMetadata)
}
interface com.events.common.jdbc.transaction.EventsTransactionTemplate {
~ T executeInTransaction(Supplier<T>)
}
class com.events.common.jdbc.sql.dialect.MySqlDialect {
}
class com.events.common.jdbc.spring.config.EventsSqlDialectConfiguration {
+ PostgreSqlDialect postgreSqlDialect()
+ MySqlDialect mySqlDialect()
+ DefaultEventsSqlDialect defaultSqlDialect(String)
+ EventsSqlDialectSelector eventsSqlDialectSelector(Collection<EventsSqlDialect>)
}
class com.events.common.util.EventsException {
}
class com.events.common.jdbc.sql.dialect.PostgreSqlDialect {
}
class com.events.common.json.mapper.JSonMapper {
+ {static} ObjectMapper objectMapper
+ {static} String toJson(Object)
+ {static} T fromJson(String,Class<T>)
+ {static} T fromJsonByName(String,String)
}


com.events.common.jdbc.sql.dialect.AbstractEventsSqlDialect <|-- com.events.common.jdbc.sql.dialect.DefaultEventsSqlDialect
com.events.common.id.IdGenerator <|.. com.events.common.id.DatabaseIdGenerator
com.events.common.jdbc.executor.EventsJdbcStatementExecutor <|.. com.events.common.jdbc.executor.EventsJdkJdbcStatementExecutor
com.events.common.jdbc.transaction.EventsTransactionTemplate <|.. com.events.common.jdbc.transaction.EventsSpringTransactionTemplate
com.events.common.jdbc.sql.dialect.EventsSqlDialectOrder <|-- com.events.common.jdbc.sql.dialect.EventsSqlDialect
com.events.common.jdbc.sql.dialect.EventsSqlDialect <|.. com.events.common.jdbc.sql.dialect.AbstractEventsSqlDialect
com.events.common.jdbc.exception.EventsSqlException <|-- com.events.common.jdbc.exception.EventsDuplicateKeyException
com.events.common.jdbc.executor.EventsJdbcStatementExecutor <|.. com.events.common.jdbc.executor.EventsSpringJdbcStatementExecutor
com.events.common.id.IdGenerator <|.. com.events.common.id.ApplicationIdGenerator
com.events.common.jdbc.exception.RuntimeException <|-- com.events.common.jdbc.exception.EventsSqlException
org.springframework.boot.autoconfigure.condition.SpringBootCondition <|-- com.events.common.id.spring.config.ApplicationIdGeneratorCondition
com.events.common.jdbc.sql.dialect.AbstractEventsSqlDialect <|-- com.events.common.jdbc.sql.dialect.MySqlDialect
com.events.common.util.RuntimeException <|-- com.events.common.util.EventsException
com.events.common.jdbc.sql.dialect.AbstractEventsSqlDialect <|-- com.events.common.jdbc.sql.dialect.PostgreSqlDialect
@enduml